[
  {
    "Id": "856397",
    "ThreadId": "361700",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am pretty new to EF and am currently working with EF 4.3, I have added your EF.Patterns 0.6 via nuget as I am trying to implement an audit and repository function for my tables.</p>\r\n<p>I currently use UnitOfWork with a generic repository pattern, but I also need to implement a business logic layer. As I have said I am quite new to this and so I could do with some guidance on how to structure these patterns together.</p>\r\n<p>I am a little unsure what the various patterns are for such as unitOfWork, Repository/Generic Repository and Business logic. Currently I only have a Generic repository which performs functions such as GetByID, Delete, Create, Update and Get. But I also want\r\n to introduce some more specific funtions such as get User permission level for a specific function by passing user and function for example.</p>\r\n<p>Would you include these specific types in in the generic repository class or create seperate ones, and is the repository pattern where you put these data access functions? What goes in to your business logic as this confuses me somewhat?</p>\r\n<p>I need to be able to audit my tables and want to be able to check who has done a particular action on a particular record, what the action was and when it was performed. I also want to be able to look back at past revision of a record whether it has been\r\n Created, Updated or even deleted.</p>\r\n<p>Here is some of my code, I was wonder if you could give me some guidance/examples of how to implement the Auditable/Archivable patterns to decorate my repositories and how I should go about further adding to my repositories/ Business logic layer.</p>\r\n<pre>using System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\n\r\nnamespace PayPlate.Models\r\n{\r\n    public class PayrollSelection\r\n    {\r\n        public IEnumerable Payrolls { get; set; }\r\n        public IEnumerable Users { get; set; }\r\n        public IEnumerable Permissions { get; set; } \r\n    }\r\n\r\n    public class PayrollIndexData\r\n    {\r\n        public IEnumerable Payrolls { get; set; }\r\n        public IEnumerable Users { get; set; }\r\n        public IEnumerable Functions { get; set; }\r\n        public IEnumerable Permissions { get; set; } \r\n    }\r\n\r\n    public class Payroll\r\n    {\r\n        public int PayrollID { get; set; }\r\n        [Required(ErrorMessage = &quot;Payroll title is required.&quot;)]\r\n        [Display(Name = &quot;Payroll&quot;)]\r\n        [MaxLength(20)] \r\n        public string Title { get; set; }\r\n        [Required(ErrorMessage = &quot;C21 description is required.&quot;)]\r\n        [Display(Name = &quot;C21 Name&quot;)]\r\n        [MaxLength(20)] \r\n        public string C21Name { get; set; }\r\n        [Required(ErrorMessage = &quot;Server name is required.&quot;)]\r\n        [Display(Name = &quot;Server Name&quot;)]\r\n        [MaxLength(20)] \r\n        public string Server { get; set; }\r\n        [Required(ErrorMessage = &quot;Port is required.&quot;)]\r\n        [Display(Name = &quot;Port&quot;)]\r\n        [MaxLength(5)] \r\n        public string Port { get; set; }\r\n        [Required(ErrorMessage = &quot;Connection string is required.&quot;)]\r\n        [Display(Name = &quot;Connection String&quot;)]\r\n        [MaxLength(200)] \r\n        public string Connection { get; set; }\r\n        public virtual ICollection Permissions { get; set; }\r\n    }\r\n\r\n    public class SelectedPayroll\r\n    {\r\n        public string UserName { get; set; }\r\n        public int UserID { get; set; }\r\n        public int PayrollID { get; set; }\r\n        public string Title { get; set; }\r\n    }\r\n\r\n    public class PermissionsPayrollGrp\r\n    {\r\n        public string Payroll { get; set; }\r\n        public int UserCount { get; set; }\r\n    } \r\n\r\n    public class Function\r\n    {\r\n        public int FunctionID { get; set; }\r\n        [Required(ErrorMessage = &quot;Function description is required.&quot;)]\r\n        [Display(Name = &quot;Function&quot;)]\r\n        [MaxLength(20)] \r\n        public string Title { get; set; }\r\n        public virtual ICollection Permissions { get; set; }\r\n    }\r\n\r\n    public class Permission\r\n    {\r\n        public int PermissionID { get; set; }\r\n        public int PayrollID { get; set; }\r\n        public int FunctionID { get; set; }\r\n        public int UserID { get; set; }\r\n        [Range(typeof(double), &quot;1&quot;, &quot;5&quot;)]\r\n        public double? Level { get; set; }\r\n        public virtual Payroll Payroll { get; set; }\r\n        public virtual Function Function { get; set; }\r\n        public virtual User User { get; set; }\r\n    }\r\n\r\n    public class User\r\n    {\r\n        public int UserID { get; set; }\r\n        public string NetLogin { get; set; }\r\n        [Required(ErrorMessage = &quot;Employee number is required.&quot;)]\r\n        [Display(Name = &quot;Employee Number&quot;)]\r\n        [MaxLength(6)] \r\n        public string EmpNumber { get; set; }\r\n        [Required(ErrorMessage = &quot;First name is required.&quot;)]\r\n        [Display(Name = &quot;First Name&quot;)]\r\n        [MaxLength(50)] \r\n        public string Forename { get; set; }\r\n        [Required(ErrorMessage = &quot;Last name is required.&quot;)]\r\n        [Display(Name = &quot;Last Name&quot;)]\r\n        [MaxLength(50)] \r\n        public string Surname { get; set; }\r\n        public bool Active { get; set; }\r\n        public virtual ICollection Permissions { get; set; }\r\n    }\r\n}</pre>\r\n<pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\n\r\nnamespace PayPlate.Models\r\n{\r\n    public class JobCode\r\n    {\r\n        public int JobCodeID { get; set; }\r\n        public string Jobcode { get; set; }\r\n        public int DivisionID { get; set; }\r\n        public int AuthChainID { get; set; }\r\n        public int JobID { get; set; }\r\n        public int PensionID { get; set; }\r\n        public int AnalysisGrpID { get; set; }\r\n        public int CostGrpID { get; set; }\r\n        public int ContractID { get; set; }\r\n        public bool AuthJob { get; set; }\r\n        public virtual Division Division { get; set; }\r\n        public virtual AuthChain AuthChain { get; set; }\r\n        public virtual Job Job { get; set; }\r\n        public virtual Pension Pension { get; set; }\r\n        public virtual AnalysisGrp AnalysisGrp { get; set; }\r\n        public virtual CostGrp CostGrp { get; set; }\r\n        public virtual Contract Contract { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class Division\r\n    {\r\n        public int DivisionID { get; set; }\r\n        public string Code { get; set; }\r\n        public string Title { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class AuthChain\r\n    {\r\n        public int AuthChainID { get; set; }\r\n        public string RL01 { get; set; }\r\n        public int RL01Emp { get; set; }\r\n        public string RL02 { get; set; }\r\n        public int RL02Emp { get; set; }\r\n        public string RL03 { get; set; }\r\n        public int RL03Emp { get; set; }\r\n        public string RL04 { get; set; }\r\n        public int RL04Emp { get; set; }\r\n        public string RL05 { get; set; }\r\n        public int RL05Emp { get; set; }\r\n        public string RL06 { get; set; }\r\n        public int RL06Emp { get; set; }\r\n        public string RL07 { get; set; }\r\n        public int RL07Emp { get; set; }\r\n        public string RL08 { get; set; }\r\n        public int RL08Emp { get; set; }\r\n        public string RL09 { get; set; }\r\n        public string RL09Emp { get; set; }\r\n        public string RL10 { get; set; }\r\n        public string RL10Emp { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class Job\r\n    {\r\n        public int JobID { get; set; }\r\n        public string Title { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class Pension\r\n    {\r\n        public int PensionID { get; set; }\r\n        public string Code { get; set; }\r\n        public string Title { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class AnalysisGrp\r\n    {\r\n        public int AnalysisGrpID { get; set; }\r\n        public string Value { get; set; }\r\n        public string Name { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class CostGrp\r\n    {\r\n        public int CostGrpID { get; set; }\r\n        public string Value { get; set; }\r\n        public string Name { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    }\r\n\r\n    public class Contract\r\n    {\r\n        public int ContractID { get; set; }\r\n        public string Code { get; set; }\r\n        public string Name { get; set; }\r\n        public double Hours { get; set; }\r\n        public double Weeks { get; set; }\r\n        public int Author { get; set; }\r\n        public DateTime Created { get; set; }\r\n        public string Action { get; set; }\r\n    } \r\n}</pre>\r\n<pre>using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Web;<br><br>namespace PayPlate.Models<br>{<br>&nbsp;&nbsp;&nbsp; public class GLRule<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int GLRuleID { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int ContractID { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int DivisionID { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int JobID { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int AnalysisGrpID { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int CostGrpID { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual Contract Contract { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual Division Division { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual Job Job { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual AnalysisGrp AnalysisGrp { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual CostGrp CostGrp { get; set; }<br>&nbsp;&nbsp;&nbsp; }<br>}</pre>\r\n<p>This is my db&nbsp; context</p>\r\n<pre>using System;\r\nusing System.Data.Entity;\r\nusing System.Data.Entity.ModelConfiguration.Conventions;\r\nusing System.ComponentModel;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.Mvc;\r\nusing PayPlate.Models;\r\n\r\nnamespace PayPlate.DAL\r\n{\r\n    public class PayPlateContext : DbContext\r\n    {\r\n        public DbSet Users { get; set; }\r\n        public DbSet Permissions { get; set; }\r\n        public DbSet Payrolls { get; set; }\r\n        public DbSet Functions { get; set; }\r\n        public DbSet JobCodes { get; set; }\r\n        public DbSet Divisions { get; set; }\r\n        public DbSet AuthChains { get; set; }\r\n        public DbSet Jobs { get; set; }\r\n        public DbSet Pensions { get; set; }\r\n        public DbSet AnalysisGrps { get; set; }\r\n        public DbSet CostGrps { get; set; }\r\n        public DbSet Contracts { get; set; }\r\n        public DbSet GLRules { get; set; }\r\n\r\n        protected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Conventions.Remove();\r\n        }\r\n    }\r\n}</pre>\r\n<p>This is my unit of work</p>\r\n<pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing PayPlate.Models;\r\n\r\nnamespace PayPlate.DAL\r\n{\r\n    public class UnitOfWork : IDisposable \r\n    { \r\n        private PayPlateContext context = new PayPlateContext();\r\n        private GenericRepository userRepository;\r\n        private GenericRepository permissionRepository; \r\n        private GenericRepository payrollRepository; \r\n        private GenericRepository functionRepository;\r\n        private GenericRepository payrollIndexDataRepository;\r\n        private GenericRepository payrollSelectionRepository;\r\n        private GenericRepository gLRuleRepository;\r\n        private GenericRepository contractRepository;\r\n        private GenericRepository costGrpRepository;\r\n        private GenericRepository analysisGrpRepository;\r\n        private GenericRepository jobRepository;\r\n        private GenericRepository divisionRepository;\r\n        private GenericRepository authChainRepository;\r\n        private GenericRepository jobCodeRepository;\r\n        private GenericRepository pensionRepository;\r\n\r\n\r\n        public GenericRepository GLRuleRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.gLRuleRepository == null)\r\n                {\r\n                    this.gLRuleRepository = new GenericRepository(context);\r\n                }\r\n                return gLRuleRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository ContractRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.contractRepository == null)\r\n                {\r\n                    this.contractRepository = new GenericRepository(context);\r\n                }\r\n                return contractRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository CostGrpRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.costGrpRepository == null)\r\n                {\r\n                    this.costGrpRepository = new GenericRepository(context);\r\n                }\r\n                return costGrpRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository AnalysisGrpRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.analysisGrpRepository == null)\r\n                {\r\n                    this.analysisGrpRepository = new GenericRepository(context);\r\n                }\r\n                return analysisGrpRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository JobRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.jobRepository == null)\r\n                {\r\n                    this.jobRepository = new GenericRepository(context);\r\n                }\r\n                return jobRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository DivisionRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.divisionRepository == null)\r\n                {\r\n                    this.divisionRepository = new GenericRepository(context);\r\n                }\r\n                return divisionRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository AuthChainRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.authChainRepository == null)\r\n                {\r\n                    this.authChainRepository = new GenericRepository(context);\r\n                }\r\n                return authChainRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository JobCodeRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.jobCodeRepository == null)\r\n                {\r\n                    this.jobCodeRepository = new GenericRepository(context);\r\n                }\r\n                return jobCodeRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository PensionRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.pensionRepository == null)\r\n                {\r\n                    this.pensionRepository = new GenericRepository(context);\r\n                }\r\n                return pensionRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository PayrollSelectionRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.payrollSelectionRepository == null)\r\n                {\r\n                    this.payrollSelectionRepository = new GenericRepository(context);\r\n                }\r\n                return payrollSelectionRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository PermissionRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.permissionRepository == null)\r\n                {\r\n                    this.permissionRepository = new GenericRepository(context);\r\n                }\r\n                return permissionRepository;\r\n            }\r\n        }\r\n\r\n        public GenericRepository UserRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.userRepository == null)\r\n                {\r\n                    this.userRepository = new GenericRepository(context);\r\n                }\r\n                return userRepository;\r\n            }\r\n        } \r\n \r\n        public GenericRepository PayrollRepository \r\n        { \r\n            get \r\n            { \r\n \r\n                if (this.payrollRepository == null) \r\n                { \r\n                    this.payrollRepository = new GenericRepository(context); \r\n                } \r\n                return payrollRepository; \r\n            } \r\n        } \r\n \r\n        public GenericRepository FunctionRepository \r\n        { \r\n            get \r\n            { \r\n \r\n                if (this.functionRepository == null) \r\n                {\r\n                    this.functionRepository = new GenericRepository(context); \r\n                }\r\n                return functionRepository; \r\n            } \r\n        }\r\n\r\n        public GenericRepository PayrollIndexDataRepository\r\n        {\r\n            get\r\n            {\r\n\r\n                if (this.payrollIndexDataRepository == null)\r\n                {\r\n                    this.payrollIndexDataRepository = new GenericRepository(context);\r\n                }\r\n                return payrollIndexDataRepository;\r\n            }\r\n        }\r\n \r\n        public void Save() \r\n        { \r\n            context.SaveChanges(); \r\n        } \r\n \r\n        private bool disposed = false; \r\n \r\n        protected virtual void Dispose(bool disposing) \r\n        { \r\n            if (!this.disposed) \r\n            { \r\n                if (disposing) \r\n                { \r\n                    context.Dispose(); \r\n                } \r\n            } \r\n            this.disposed = true; \r\n        } \r\n \r\n        public void Dispose() \r\n        { \r\n            Dispose(true); \r\n            GC.SuppressFinalize(this); \r\n        } \r\n    } \r\n}</pre>\r\n<p>This is my Generic Repository</p>\r\n<pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Data;\r\nusing System.Data.Entity;\r\nusing PayPlate.Models;\r\nusing System.Linq.Expressions;\r\n\r\nnamespace PayPlate.DAL\r\n{\r\n    public class GenericRepository where TEntity : class\r\n    {\r\n        internal PayPlateContext context;\r\n        internal DbSet dbSet;\r\n\r\n        public GenericRepository(PayPlateContext context)\r\n        {\r\n            this.context = context;\r\n            this.dbSet = context.Set();\r\n        }\r\n\r\n        public virtual IEnumerable Get(\r\n            Expression&gt; filter = null,\r\n            Func, IOrderedQueryable&gt; orderBy = null,\r\n            string includeProperties = &quot;&quot;)\r\n        {\r\n            IQueryable query = dbSet;\r\n\r\n            if (filter != null)\r\n            {\r\n                query = query.Where(filter);\r\n            }\r\n\r\n            foreach (var includeProperty in includeProperties.Split\r\n                (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))\r\n            {\r\n                query = query.Include(includeProperty);\r\n            }\r\n\r\n            if (orderBy != null)\r\n            {\r\n                return orderBy(query).ToList();\r\n            }\r\n            else\r\n            {\r\n                return query.ToList();\r\n            }\r\n        }\r\n\r\n        public virtual TEntity GetByID(object id)\r\n        {\r\n            return dbSet.Find(id);\r\n        }\r\n\r\n        public virtual void Insert(TEntity entity)\r\n        {\r\n            dbSet.Add(entity);\r\n        }\r\n\r\n        public virtual void Delete(object id)\r\n        {\r\n            TEntity entityToDelete = dbSet.Find(id);\r\n            Delete(entityToDelete);\r\n        }\r\n\r\n        public virtual void Delete(TEntity entityToDelete)\r\n        {\r\n\r\n            if (context.Entry(entityToDelete).State == EntityState.Detached)\r\n            {\r\n                dbSet.Attach(entityToDelete);\r\n            }\r\n            dbSet.Remove(entityToDelete);\r\n        }\r\n\r\n        public virtual void Update(TEntity entityToUpdate)\r\n        {\r\n            dbSet.Attach(entityToUpdate);\r\n            context.Entry(entityToUpdate).State = EntityState.Modified;\r\n        }\r\n    }\r\n}</pre>\r\n<p>And this is an example of one of my controllers:</p>\r\n<pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Data.Entity;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.Mvc;\r\nusing PayPlate.Models;\r\nusing PayPlate.DAL;\r\nusing PagedList;\r\n\r\nnamespace PayPlate.Controllers\r\n{\r\n    public class PermissionController : Controller\r\n    {\r\n        private UnitOfWork unitOfWork = new UnitOfWork(); \r\n\r\n        //\r\n        // GET: /Permission/\r\n\r\n        public ViewResult Index(string sortOrder, string currentFilter, string searchString, int? page)\r\n        {\r\n            //var permissions = db.Permissions.Include(p =&gt; p.Payroll).Include(p =&gt; p.Function).Include(p =&gt; p.User);\r\n            //return View(permissions.ToList());\r\n\r\n            ViewBag.CurrentSort = sortOrder;\r\n            ViewBag.UserSortParm = String.IsNullOrEmpty(sortOrder) ? &quot;User desc&quot; : &quot;&quot;;\r\n            ViewBag.PaySortParm = String.IsNullOrEmpty(sortOrder) ? &quot;Pay desc&quot; : &quot;Pay&quot;;\r\n            ViewBag.FuncSortParm = String.IsNullOrEmpty(sortOrder) ? &quot;Func desc&quot; : &quot;Func&quot;;\r\n            ViewBag.LevelSortParm = sortOrder == &quot;Level&quot; ? &quot;Level desc&quot; : &quot;Level&quot;;\r\n\r\n            if (Request.HttpMethod == &quot;GET&quot;)\r\n            {\r\n                searchString = currentFilter;\r\n            }\r\n            else\r\n            {\r\n                page = 1;\r\n            }\r\n            ViewBag.CurrentFilter = searchString;\r\n\r\n            var rights = from s in unitOfWork.PermissionRepository.Get()\r\n                        select s;\r\n            if (!String.IsNullOrEmpty(searchString))\r\n            {\r\n                rights = rights.Where(s =&gt; s.User.NetLogin.ToUpper().Contains(searchString.ToUpper())\r\n                                       || s.Payroll.Title.ToUpper().Contains(searchString.ToUpper())\r\n                                       || s.Function.Title.ToUpper().Contains(searchString.ToUpper()));\r\n            }\r\n\r\n            switch (sortOrder)\r\n            {\r\n                case &quot;User desc&quot;:\r\n                    rights = rights.OrderByDescending(s =&gt; s.User.NetLogin);\r\n                    break;\r\n                case &quot;Pay&quot;:\r\n                    rights = rights.OrderBy(s =&gt; s.Payroll.Title);\r\n                    break;\r\n                case &quot;Pay desc&quot;:\r\n                    rights = rights.OrderByDescending(s =&gt; s.Payroll.Title);\r\n                    break;\r\n                case &quot;Func&quot;:\r\n                    rights = rights.OrderBy(s =&gt; s.Function.Title);\r\n                    break;\r\n                case &quot;Func desc&quot;:\r\n                    rights = rights.OrderByDescending(s =&gt; s.Function.Title);\r\n                    break;\r\n                case &quot;Level&quot;:\r\n                    rights = rights.OrderBy(s =&gt; s.Level);\r\n                    break;\r\n                case &quot;Level desc&quot;:\r\n                    rights = rights.OrderByDescending(s =&gt; s.Level);\r\n                    break;\r\n                default:\r\n                    rights = rights.OrderBy(s =&gt; s.User.NetLogin);\r\n                    break;\r\n            }\r\n\r\n            int pageSize = 10;\r\n            int pageNumber = (page ?? 1);\r\n            return View(rights.ToPagedList(pageNumber, pageSize)); \r\n        }\r\n\r\n        //\r\n        // GET: /Permission/Details/5\r\n\r\n        public ViewResult Details(int id)\r\n        {\r\n            Permission permission = unitOfWork.PermissionRepository.GetByID(id);\r\n            return View(permission);\r\n        }\r\n\r\n        //\r\n        // GET: /Permission/Create\r\n\r\n        public ActionResult Create()\r\n        {\r\n            ViewBag.PayrollID = new SelectList(unitOfWork.PayrollRepository.Get(), &quot;PayrollID&quot;, &quot;Title&quot;);\r\n            ViewBag.FunctionID = new SelectList(unitOfWork.FunctionRepository.Get(), &quot;FunctionID&quot;, &quot;Title&quot;);\r\n            ViewBag.UserID = new SelectList(unitOfWork.UserRepository.Get(), &quot;UserID&quot;, &quot;NetLogin&quot;);\r\n            return View();\r\n        } \r\n\r\n        //\r\n        // POST: /Permission/Create\r\n\r\n        [HttpPost]\r\n        public ActionResult Create(Permission permission)\r\n        {\r\n            if (ModelState.IsValid)\r\n            {\r\n                var permissions = unitOfWork.PermissionRepository.Get(s =&gt; s.User.UserID == permission.UserID\r\n                                                                    &amp;&amp; s.PayrollID == permission.PayrollID\r\n                                                                    &amp;&amp; s.Function.FunctionID == permission.FunctionID);\r\n                if (permissions.Count() == 0)\r\n                {\r\n                    unitOfWork.PermissionRepository.Insert(permission);\r\n                    unitOfWork.Save();\r\n                    return RedirectToAction(&quot;Index&quot;);\r\n                }\r\n            }\r\n\r\n            ViewBag.PayrollID = new SelectList(unitOfWork.PayrollRepository.Get(), &quot;PayrollID&quot;, &quot;Title&quot;, permission.PayrollID);\r\n            ViewBag.FunctionID = new SelectList(unitOfWork.FunctionRepository.Get(), &quot;FunctionID&quot;, &quot;Title&quot;, permission.FunctionID);\r\n            ViewBag.UserID = new SelectList(unitOfWork.UserRepository.Get(), &quot;UserID&quot;, &quot;NetLogin&quot;, permission.UserID);\r\n            return View(permission);\r\n        }\r\n        \r\n        //\r\n        // GET: /Permission/Edit/5\r\n \r\n        public ActionResult Edit(int id)\r\n        {\r\n            Permission permission = unitOfWork.PermissionRepository.GetByID(id);\r\n            ViewBag.PayrollID = new SelectList(unitOfWork.PayrollRepository.Get(), &quot;PayrollID&quot;, &quot;Title&quot;, permission.PayrollID);\r\n            ViewBag.FunctionID = new SelectList(unitOfWork.FunctionRepository.Get(), &quot;FunctionID&quot;, &quot;Title&quot;, permission.FunctionID);\r\n            ViewBag.UserID = new SelectList(unitOfWork.UserRepository.Get(), &quot;UserID&quot;, &quot;NetLogin&quot;, permission.UserID);\r\n            return View(permission);\r\n        }\r\n\r\n        //\r\n        // POST: /Permission/Edit/5\r\n\r\n        [HttpPost]\r\n        public ActionResult Edit(Permission permission)\r\n        {\r\n            try\r\n            {\r\n                if (ModelState.IsValid)\r\n                {\r\n                    var permissions = unitOfWork.PermissionRepository.Get(s =&gt; s.User.UserID == permission.UserID\r\n                                                                        &amp;&amp; s.Payroll.PayrollID == permission.PayrollID\r\n                                                                        &amp;&amp; s.Function.FunctionID == permission.FunctionID\r\n                                                                        &amp;&amp; s.PermissionID != permission.PermissionID);\r\n\r\n                    if(permissions.Count() == 0)\r\n                    {\r\n                        \r\n                        unitOfWork.PermissionRepository.Update(permission);\r\n                        unitOfWork.Save();\r\n                        return RedirectToAction(&quot;Index&quot;);\r\n                    }\r\n                }\r\n            }\r\n            catch (DataException)\r\n            {\r\n                //Log the error (add a variable name after DataException) \r\n                ModelState.AddModelError(&quot;&quot;, &quot;Unable to save changes to permission. Try again, and if the problem persists see your system administrator.&quot;);\r\n            } \r\n\r\n            ViewBag.PayrollID = new SelectList(unitOfWork.PayrollRepository.Get(), &quot;PayrollID&quot;, &quot;Title&quot;, permission.PayrollID);\r\n            ViewBag.FunctionID = new SelectList(unitOfWork.FunctionRepository.Get(), &quot;FunctionID&quot;, &quot;Title&quot;, permission.FunctionID);\r\n            ViewBag.UserID = new SelectList(unitOfWork.UserRepository.Get(), &quot;UserID&quot;, &quot;NetLogin&quot;, permission.UserID);\r\n            return View(permission);\r\n        }\r\n\r\n        //\r\n        // GET: /Permission/Delete/5\r\n \r\n        public ActionResult Delete(int id)\r\n        {\r\n            Permission permission = unitOfWork.PermissionRepository.GetByID(id);\r\n            return View(permission);\r\n        }\r\n\r\n        //\r\n        // POST: /Permission/Delete/5\r\n\r\n        [HttpPost, ActionName(&quot;Delete&quot;)]\r\n        public ActionResult DeleteConfirmed(int id)\r\n        {\r\n            Permission permission = unitOfWork.PermissionRepository.GetByID(id);\r\n            unitOfWork.PermissionRepository.Delete(permission);\r\n            unitOfWork.Save();\r\n            return RedirectToAction(&quot;Index&quot;);\r\n        }\r\n\r\n        protected override void Dispose(bool disposing)\r\n        {\r\n            unitOfWork.Dispose();\r\n            base.Dispose(disposing);\r\n        }\r\n    }\r\n}</pre>\r\n<p>Thanks in advance for any help you can offer,</p>\r\n<p>Andy</p>\r\n",
    "PostedDate": "2012-07-02T08:24:16.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]