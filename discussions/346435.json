[
  {
    "Id": "802068",
    "ThreadId": "346435",
    "Html": "\r\n<p>Hi,</p>\r\n<p>While looking with a great interest the differents needs i could satisfy using this library, i ran into some runtime error during the &quot;Set_Created&quot; method call in this particular case :</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/*sample POCO model class*/</span>\r\n[Archivable,Auditable]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> WorkBench\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Tag { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Label { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n}\r\n<span style=\"color:green\">/* ... */</span>\r\n<span style=\"color:green\">/*sample insert method*/</span>\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> InitDataContext()\r\n{\r\n    <span style=\"color:blue\">using</span> (Context ctx = <span style=\"color:blue\">new</span> Context())\r\n    <span style=\"color:blue\">using</span>(DbContextAdapter adpt = <span style=\"color:blue\">new</span> DbContextAdapter(ctx))\r\n    {\r\n        IRepository&lt;Workbench&gt; repo =\r\n            <span style=\"color:blue\">new</span> AuditableRepository&lt;Workbench&gt;(\r\n                    <span style=\"color:blue\">new</span> Repository&lt;Workbench&gt;(adpt)\r\n            );\r\n\r\n        repo.Insert(<span style=\"color:blue\">new</span> Workbench() { Label = <span style=\"color:#a31515\">&quot;to create&quot;</span>, Tag = <span style=\"color:#a31515\">&quot;TSTc&quot;</span> });\r\n        repo.Insert(<span style=\"color:blue\">new</span> Workbench() { Label = <span style=\"color:#a31515\">&quot;to update&quot;</span>, Tag = <span style=\"color:#a31515\">&quot;TSTu&quot;</span> });\r\n        repo.Insert(<span style=\"color:blue\">new</span> Workbench() { Label = <span style=\"color:#a31515\">&quot;to delete&quot;</span>, Tag = <span style=\"color:#a31515\">&quot;TSTd&quot;</span> });\r\n\r\n        adpt.SaveChanges();\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>=&gt; at &quot;repo.Insert(new Workbench()&quot; : System.InvalidProgramException ; stackTrace : &quot;XXX.Workbench.set_CreatedBy(String value)&quot;, &quot;EntityFramework.Patterns.Decorators.AuditableRepository`1.Insert(T entity)&quot;</p>\r\n<p>This workaround do the trick :</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">/*sample POCO model class*/</span>\r\n[Archivable]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> WorkBench : IAuditable\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Tag { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Label { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n    <span style=\"color:blue\">public</span> DateTime Created { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> CreatedBy { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> DateTime? Updated { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> UpdatedBy { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>What is the proper way to decorate a model class with Archivable and Auditable attributes ?</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-02-27T08:17:01.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "802849",
    "ThreadId": "346435",
    "Html": "<p>Hello <span class=\"UserProfileLink\">GrgRz,</span></p>\r\n<p>Thanks for using EntityFramework.Patterns.</p>\r\n<p>let me ask you which version of the lib you're using?</p>\r\n<p>The current stable version is 0.5 and should work in your scenario.</p>\r\n<p>But if you're using the latest source code (Source code tab), then this is a known issue, that I'm trying to fix right now before releasing 0.6 version.</p>\r\n<p>Anyway, your workaround is exactly what i would suggest to use, until the next release.</p>\r\n<p>I hope this will help you.</p>",
    "PostedDate": "2012-02-28T13:43:20.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "803194",
    "ThreadId": "346435",
    "Html": "<p>Hello Fab_Michellonet,</p>\r\n<p>thanks for the quick reply.</p>\r\n<p>I used nuget to add the needed references :</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n<span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">packages</span><span style=\"color: blue;\">&gt;</span>\r\n  <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">package</span> <span style=\"color: red;\">id</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"EntityFramework\"</span> <span style=\"color: red;\">version</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"4.3.0\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n  <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">package</span> <span style=\"color: red;\">id</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"EntityFramework.Patterns\"</span> <span style=\"color: red;\">version</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"0.5\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">packages</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Complete v numbers are :</p>\r\n<ul>\r\n<li>EntityFramework.dll :&nbsp;4.3.0.0</li>\r\n<li>EntityFramework.Patterns.dll :&nbsp;0.5.0.37009</li>\r\n<li>Afterthought.dll : 1.0.6.0</li>\r\n</ul>\r\n<p>In order to try to understand who it works, i tried to create the needed \"plumbing\" classes in my model project \"Project.Model\", by looking at the source code and imitating the logic you've build up, in order to create my own amender :</p>\r\n<ul>\r\n<li>Project.Model.Extensions.AmendAttribute</li>\r\n<li>Project.Model.Extensions.IConcurrencyAware</li>\r\n<li>Project.Model.Extensions.ConcurrencyAwareAttribute</li>\r\n<li>Project.Model.Amenders.ConcurrencyAwareAmender&lt;T&gt;</li>\r\n</ul>\r\n<p>The first thing i've noticed is that it seems i'm not having the same \"Afterthought\" version than the one used by EntityFramework.Patterns&nbsp;: mine doesn't implement this signature :</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">namespace</span> Project.Model.Amenders\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> ConcurrencyAwareAmender&lt;T&gt; : Amendment&lt;T, T&gt;\r\n    {\r\n        <span style=\"color: blue;\">public</span> ConcurrencyAwareAmender()\r\n        {\r\n            <span style=\"color: green;\">//Implement&lt;IConcurrencyAware&gt;(explicitImplementation: false);</span>\r\n            Implement&lt;IConcurrencyAware&gt;();\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\nI've just passed a couple of hours on it, but i failed to make it work (i've decorated the \"Project.Model\" assembly with the proper&nbsp;\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>[<span style=\"color: blue;\">assembly</span>: Project.Model.Extensions.Amend] call).</pre>\r\n<pre>Anyway i've noticed that you was quite active on Afterthought project too and saw that you recently added the Implement&lt;T&gt; ctor signature i was missing.\r\n</pre>\r\n<pre><br /></pre>\r\n<pre>I'll keep to track those two projects, waiting for the next releases.</pre>\r\n<pre>Thanks for your time.</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2012-02-29T08:06:38.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "804052",
    "ThreadId": "346435",
    "Html": "<p>Hi <span class=\"UserProfileLink\">GrgRz,</span></p>\r\n<p>I used to test EFPatterns 0.5 against Entity Framework 4.1; i thought that it would be functional with the 4.3 version but you're proving here that this is not the case.</p>\r\n<p>EFPatterns 0.6 (next version) is meant to work properly with Entity Framework 4.3.</p>\r\n<p>Concerning Afterthought, the Nuget version of the lib is old and desynchronized with the github repository.</p>\r\n<p>As I'm not the maintainer of Afterthought I've proposed 3 patches (including Interface implementation as you've noted)&nbsp; and I'm waiting for the pull request to be hopefully accepted. In the meantime, my only option is to ship my own version of Afterthought.</p>\r\n<p>I really hope to ship EFPattern 0.6 really soon... thanks for your patience.</p>",
    "PostedDate": "2012-03-01T14:50:17.54-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "807187",
    "ThreadId": "346435",
    "Html": "<p><span class=\"UserProfileLink\">Hi GrgRz,</span></p>\r\n<p><br />i've just uploaded the 0.6 version, and it should correct your two issues.</p>\r\n<p>HTH.</p>",
    "PostedDate": "2012-03-07T15:48:44.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "814002",
    "ThreadId": "346435",
    "Html": "<p>Hi Fabrice,</p>\r\n<p>I just noticed today the new 0.6 version on nuget. Thanks for the quick fix, i plan to update my test project this Friday.</p>",
    "PostedDate": "2012-03-22T05:43:17.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]